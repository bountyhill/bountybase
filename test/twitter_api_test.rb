require_relative 'test_helper'

class TwitterApiTest < Test::Unit::TestCase
  include Bountybase::TestCase

  def setup
    Neo4j.purge!
  end

  def test_find_followees
    expected_followee_ids = [ 14820116, 14704405, 14078815, 166064436, 186814385, 183062443, 6927562, 16624195, 14718665, 540850614, 18822696, 249682563, 16569660, 721623, 263762253, 13020132, 790205, 557840671, 23737428, 553622948, 15203138, 10377392, 12063172, 47728577, 376471243, 247377477, 112419193, 85755774, 328221255, 105112913, 14120151, 13334762, 71544889, 4337591, 39075588, 38478172, 49984623, 21873954, 41650490, 179644398, 185428703, 17938747, 299553045, 14971440, 383153699, 370126546, 210831524, 475910101, 79147066, 170605832, 188639583, 6696102, 498607202, 74808879, 24537879, 110240184, 184470467, 15079252, 25732138, 274562077, 215685328, 6621712, 3302401, 456867387, 3726981, 26642006, 10387152, 1754301, 218429715, 154465831, 104566554, 25525278, 815114, 10912992, 70216482, 407304219, 5813712, 334732971, 59778624, 170785818, 16004268, 157442008, 34922175, 728773, 382358290, 14748460, 17990925, 5206791, 21897446, 430739221, 215455741, 65119912, 8255682, 63362743, 6151392, 18616021, 204787796, 200417340, 96320763, 39306627, 2729061, 203992327, 296579867, 15210389, 138034438, 53391358, 10368262, 231756759, 26923398, 18058089, 140056627, 43862205, 25703613, 327877868, 1623, 8759282, 8140962, 129825092, 260428966, 24785621, 17461132, 18184195, 325832193, 9027822, 18055284, 42343, 83883736, 61355746, 198439355, 7510552, 17137749, 14465867, 108253550, 148922824, 10003202, 91379214, 161144477, 321894902, 72242064, 19706004, 7346822, 14181505, 15431118, 15092452, 14857042, 242475497, 201368677, 113651925, 19029137, 9662352, 17212860, 220966944, 15748757, 23437961, 80363, 62831092, 49793, 157448916, 182318898, 14939200, 43961444, 6238172, 15407883, 11531602, 9599342, 15383800, 104579060, 20231384, 183992483, 815973, 14147875, 107452089, 14436377, 15423596, 15029296, 1045821, 9459332, 11171152, 157111029, 18083235, 16997374, 183936836, 22803, 18997933, 14062180, 14118229, 94948942, 1183041, 3116191, 34037675, 8936812, 15403290, 13470, 15596820, 113963, 17406895, 16148847, 14658472, 14171126, 44141824, 100198731, 8526432, 72095250, 58569837, 59275153, 77827772, 2896601, 813491, 66952229, 5431882, 7162482, 44371551, 14229121, 22559307, 33483978, 31726070, 14282544, 14326549, 819606, 6088202 ]
    
    VCR.use_cassette('followees_radiospiel', :record => :once, :allow_playback_repeats => true) do
      followee_ids = Bountybase::TwitterAPI.followee_ids("radiospiel")
      assert_equal expected_followee_ids, followee_ids
    end

    # 11754212 is radiospiel's user id.
    VCR.use_cassette('followees_11754212', :record => :once, :allow_playback_repeats => true) do
      followee_ids = Bountybase::TwitterAPI.followee_ids(11754212)
      assert_equal expected_followee_ids, followee_ids
    end
  end

  def test_lookup_users
    users = VCR.use_cassette('lookup_users', :record => :once, :allow_playback_repeats => true) do
      followee_ids = Bountybase::TwitterAPI.followee_ids(11754212)
      assert_equal followee_ids[0..2].sort, [ 14078815, 14704405, 14820116 ]
      Bountybase::TwitterAPI.users(followee_ids[0..2])
    end
    
    assert_kind_of(Hash, users)
    assert_equal([ 14078815, 14704405, 14820116 ], users.keys.sort)

    # The returned values are Twitter::User objects, that support at least
    # the attributes as tested below.
    user = users[14704405]
    assert_kind_of(Twitter::User, user)
    
    assert! user.id                 => 14704405,
      user.friends_count            => 1818,
      user.favourites_count         => 9,
      user.name                     => "Neal Silverman",
      user.screen_name              => "Neal_Silverman",
      user.profile_image_url        => "http://a0.twimg.com/profile_images/819968228/26096_10150159162995352_625295351_11639710_2006110_s_normal.jpg", 
      user.profile_image_url_https  => "https://si0.twimg.com/profile_images/819968228/26096_10150159162995352_625295351_11639710_2006110_s_normal.jpg",
      user.location                 => "Boston and SF",
      user.description              => "I run DEMO and work for IDG,  best job in the world!",
      user.lang                     => "en"
  end
end
